#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º: –∫–ª–∞—Å—Å, —Ç–µ–º—É, –ø–æ–¥—Ç–µ–º—É, —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Ç–∏–ø –∑–∞–¥–∞—á–∏
"""

import json
import random
import os
from typing import Dict, List, Any, Optional
from pathlib import Path
import config


class TaskGeneratorError(Exception):
    """Custom exception for task generation errors."""
    pass


class TaskGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    
    def __init__(self, grades_file: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            grades_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–ª–∞—Å—Å–∞—Ö –∏ —Ç–µ–º–∞—Ö
        """
        self.grades_file = grades_file or config.GRADES_FILE
        self.grades_data = self._load_grades_data()
        
        # –¢–∏–ø—ã –∑–∞–¥–∞—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        self.default_task_types = config.DEFAULT_TASK_TYPES.copy()
    
    def _load_grades_data(self) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∞—Å—Å–∞—Ö –∏ —Ç–µ–º–∞—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
        
        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –æ –∫–ª–∞—Å—Å–∞—Ö –∏ —Ç–µ–º–∞—Ö
            
        Raises:
            TaskGeneratorError: If file loading fails
        """
        grades_path = Path(self.grades_file)
        
        try:
            with open(grades_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                if not data:
                    raise TaskGeneratorError("–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–ª–∞—Å—Å–∞—Ö –ø—É—Å—Ç")
                return data
                
        except FileNotFoundError:
            error_msg = config.ERROR_MESSAGES["file_not_found"].format(path=self.grades_file)
            print(f"‚ùå {error_msg}")
            raise TaskGeneratorError(error_msg)
            
        except json.JSONDecodeError as e:
            error_msg = f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —Ñ–∞–π–ª–µ {self.grades_file}: {e}"
            print(f"‚ùå {error_msg}")
            raise TaskGeneratorError(error_msg)
    
    def get_available_grades(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤
        """
        return list(self.grades_data.keys())
    
    def get_available_topics(self, grade: str) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –¥–ª—è –∫–ª–∞—Å—Å–∞
        
        Args:
            grade (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ–º
        """
        return list(self.grades_data.get(grade, {}).keys())
    
    def get_available_subtopics(self, grade: str, topic: str) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Ç–µ–º –¥–ª—è –∫–ª–∞—Å—Å–∞ –∏ —Ç–µ–º—ã
        
        Args:
            grade (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
            topic (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–¥—Ç–µ–º
        """
        return self.grades_data.get(grade, {}).get(topic, [])
    
    def get_random_grade(self) -> str:
        """
        –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
        
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
            
        Raises:
            TaskGeneratorError: If no grades available
        """
        available_grades = self.get_available_grades()
        if not available_grades:
            raise TaskGeneratorError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤")
        return random.choice(available_grades)
    
    def get_random_topic(self, grade: str) -> str:
        """
        –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        
        Args:
            grade (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
            
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            
        Raises:
            TaskGeneratorError: If no topics available for grade
        """
        available_topics = self.get_available_topics(grade)
        if not available_topics:
            raise TaskGeneratorError(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –¥–ª—è –∫–ª–∞—Å—Å–∞ {grade}")
        return random.choice(available_topics)
    
    def get_random_subtopic(self, grade: str, topic: str) -> str:
        """
        –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–¥—Ç–µ–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ —Ç–µ–º—ã
        
        Args:
            grade (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
            topic (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–µ–º—ã
            
        Raises:
            TaskGeneratorError: If no subtopics available
        """
        available_subtopics = self.get_available_subtopics(grade, topic)
        if not available_subtopics:
            raise TaskGeneratorError(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Ç–µ–º –¥–ª—è {grade}, {topic}")
        return random.choice(available_subtopics)
    
    def get_random_difficulty(self, min_difficulty: int = None, max_difficulty: int = None) -> int:
        """
        –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç min_difficulty –¥–æ max_difficulty –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        
        Args:
            min_difficulty (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            max_difficulty (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            
        Returns:
            int: –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        """
        if min_difficulty is None:
            min_difficulty = config.DEFAULT_DIFFICULTY_RANGE[0]
        if max_difficulty is None:
            max_difficulty = config.DEFAULT_DIFFICULTY_RANGE[1]
            
        return random.randint(min_difficulty, max_difficulty)
    
    def get_random_task_type(self, task_types: Optional[List[str]] = None) -> str:
        """
        –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        
        Args:
            task_types (Optional[List[str]]): –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
            
        Returns:
            str: –¢–∏–ø –∑–∞–¥–∞—á–∏
        """
        if task_types is None:
            task_types = self.default_task_types
        if not task_types:
            raise TaskGeneratorError("–°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –ø—É—Å—Ç")
        return random.choice(task_types)
    
    def generate_random_task(self, 
                           task_types: Optional[List[str]] = None, 
                           min_difficulty: Optional[int] = None, 
                           max_difficulty: Optional[int] = None) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–∞—á–∏
        
        Args:
            task_types: —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –¥–ª—è –≤—ã–±–æ—Ä–∞
            min_difficulty: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            max_difficulty: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–¥–∞—á–∏
            
        Raises:
            TaskGeneratorError: If task generation fails
        """
        try:
            # 1. –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å
            grade = self.get_random_grade()
            
            # 2. –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É
            topic = self.get_random_topic(grade)
            
            # 3. –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ç–µ–º—É
            subtopic = self.get_random_subtopic(grade, topic)
            
            # 4. –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            difficulty = self.get_random_difficulty(min_difficulty, max_difficulty)
            
            # 5. –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
            task_type = self.get_random_task_type(task_types)
            
            return {
                "–∫–ª–∞—Å—Å": grade,
                "—Ç–µ–º–∞": topic,
                "–ø–æ–¥—Ç–µ–º–∞": subtopic,
                "—Å–ª–æ–∂–Ω–æ—Å—Ç—å": difficulty,
                "—Ç–∏–ø_–∑–∞–¥–∞—á–∏": task_type
            }
            
        except TaskGeneratorError:
            raise
        except Exception as e:
            raise TaskGeneratorError(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
    
    def print_task(self, task_data: Dict[str, Any]) -> None:
        """
        –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
        
        Args:
            task_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        """
        if "error" in task_data:
            print(f"‚ùå {task_data['error']}")
            return
        
        print("üé≤ –°–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞:")
        print("=" * 50)
        print(f"üìö –ö–ª–∞—Å—Å:      {task_data['–∫–ª–∞—Å—Å']}")
        print(f"üìñ –¢–µ–º–∞:       {task_data['—Ç–µ–º–∞']}")
        print(f"üìù –ü–æ–¥—Ç–µ–º–∞:    {task_data['–ø–æ–¥—Ç–µ–º–∞']}")
        print(f"‚≠ê –°–ª–æ–∂–Ω–æ—Å—Ç—å:  {task_data['—Å–ª–æ–∂–Ω–æ—Å—Ç—å']}/10")
        print(f"üî® –¢–∏–ø –∑–∞–¥–∞—á–∏: {task_data['—Ç–∏–ø_–∑–∞–¥–∞—á–∏']}")
        print("=" * 50)

    def get_text(self, task_data: Dict[str, Any]) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        
        Args:
            task_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            
        Returns:
            str: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        """
        if "error" in task_data:
            return f"‚ùå {task_data['error']}"
        
        lines = [
            f"üìö –ö–ª–∞—Å—Å:      {task_data['–∫–ª–∞—Å—Å']}",
            f"üìñ –¢–µ–º–∞:       {task_data['—Ç–µ–º–∞']}",
            f"üìù –ü–æ–¥—Ç–µ–º–∞:    {task_data['–ø–æ–¥—Ç–µ–º–∞']}",
            f"‚≠ê –°–ª–æ–∂–Ω–æ—Å—Ç—å:  {task_data['—Å–ª–æ–∂–Ω–æ—Å—Ç—å']}/10"
        ]
        return "\n".join(lines)


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    
    print("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á")
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        generator = TaskGenerator()
        
        # –ü—Ä–∏–º–µ—Ä 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        print("üìã –ü—Ä–∏–º–µ—Ä 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        task = generator.generate_random_task()
        generator.print_task(task)
        print()
        
        # –ü—Ä–∏–º–µ—Ä 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞—á
        print("üìã –ü—Ä–∏–º–µ—Ä 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞—á")
        custom_task_types = [
            "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
            "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞", 
            "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ",
            "–û–ª–∏–º–ø–∏–∞–¥–Ω–∞—è –∑–∞–¥–∞—á–∞",
            "–ï–ì–≠ –∑–∞–¥–∞—á–∞"
        ]
        task = generator.generate_random_task(task_types=custom_task_types)
        generator.print_task(task)
        print()
        
        # –ü—Ä–∏–º–µ—Ä 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        print("üìã –ü—Ä–∏–º–µ—Ä 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é (3-7)")
        task = generator.generate_random_task(min_difficulty=3, max_difficulty=7)
        generator.print_task(task)
        print()
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏, 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
        while True:
            user_input = input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
            if user_input.lower() == 'q':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            task = generator.generate_random_task()
            print()
            generator.print_task(task)
    
    except TaskGeneratorError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return


if __name__ == "__main__":
    main()
