"""
LaTeX compilation utilities for mathematical task generation.

This module handles LaTeX document creation and compilation to PDF format,
with optional PNG conversion through the pdf_converter module.
"""

import subprocess
from pathlib import Path
from typing import Optional, List, Dict, Any
import config
import time

# Import PDF conversion functionality
try:
    from pdf_converter import convert_pdf_single_image, PDFConversionError
    PDF_CONVERSION_AVAILABLE = True
except ImportError:
    PDF_CONVERSION_AVAILABLE = False


class LaTeXCompilationError(Exception):
    """Custom exception for LaTeX compilation errors."""
    pass


def compile_latex(latex_content: str, output_name: str = "output") -> bool:
    """
    –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç LaTeX –¥–æ–∫—É–º–µ–Ω—Ç –≤ PDF.
    
    Args:
        latex_content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ LaTeX –¥–æ–∫—É–º–µ–Ω—Ç–∞
        output_name (str): –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    
    Returns:
        bool: True –µ—Å–ª–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        
    Raises:
        LaTeXCompilationError: If compilation fails
    """
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    temp_dir = config.get_temp_dir()
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏)
    tex_file = temp_dir / f"{output_name}.tex"
    pdf_file = temp_dir / f"{output_name}.pdf"
    log_file = temp_dir / f"{output_name}.log"
    aux_file = temp_dir / f"{output_name}.aux"
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
        for old_file in [pdf_file, log_file, aux_file]:
            if old_file.exists():
                old_file.unlink()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º LaTeX —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
        with open(tex_file, 'w', encoding='utf-8') as f:
            f.write(latex_content)
        
        print(f"üîÑ –ö–æ–º–ø–∏–ª–∏—Ä—É—é LaTeX –¥–æ–∫—É–º–µ–Ω—Ç: {tex_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
        if not tex_file.exists():
            raise LaTeXCompilationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª {tex_file}")
        
        print(f"üìù LaTeX —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {tex_file} ({tex_file.stat().st_size} –±–∞–π—Ç)")
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º PDF –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
        success = False
        for attempt in range(config.LATEX_COMPILE_PASSES):
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{config.LATEX_COMPILE_PASSES}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            cmd = [
                config.LATEX_COMPILER,
                *config.LATEX_OPTIONS,
                "-output-directory", str(temp_dir.resolve()),
                str(tex_file.resolve())  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ .tex —Ñ–∞–π–ª—É
            ]
            
            print(f"   –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd, 
                capture_output=True, 
                text=True,
                timeout=60,  # 60 second timeout
                cwd=str(temp_dir.resolve())  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - temp_latex
            )
            
            if result.returncode == 0:
                success = True
                print(f"   ‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                # –î–∞–µ–º –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
                time.sleep(0.5)
                break
            else:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                print(f"   Return code: {result.returncode}")
                print(f"   STDOUT: {result.stdout[:500]}...")  # First 500 chars
                print(f"   STDERR: {result.stderr[:500]}...")  # First 500 chars
                
                if attempt == config.LATEX_COMPILE_PASSES - 1:  # Last attempt
                    error_msg = f"‚ùå {config.ERROR_MESSAGES['compilation_failed']}:\n"
                    error_msg += f"STDOUT: {result.stdout}\n"
                    error_msg += f"STDERR: {result.stderr}"
                    print(error_msg)
                    
                    # Also try to read log file for more details
                    if log_file.exists():
                        try:
                            with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                                log_content = f.read()
                                print(f"LaTeX Log (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):\n{log_content[-1000:]}")
                        except Exception as log_error:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥: {log_error}")
                    
                    raise LaTeXCompilationError(error_msg)
        
        if success and pdf_file.exists():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä PDF —Ñ–∞–π–ª–∞
            file_size = pdf_file.stat().st_size
            print(f"üìÑ PDF —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {pdf_file} ({file_size} –±–∞–π—Ç)")
            
            if file_size < 1024:  # Less than 1KB
                raise LaTeXCompilationError("PDF —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª - –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
            
            print(config.SUCCESS_MESSAGES["pdf_created"].format(path=pdf_file))
            return True
        else:
            raise LaTeXCompilationError("PDF —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
            
    except subprocess.TimeoutExpired:
        error_msg = "–¢–∞–π–º-–∞—É—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ LaTeX"
        print(f"‚ùå {error_msg}")
        raise LaTeXCompilationError(error_msg)
    except FileNotFoundError as e:
        error_msg = f"{config.ERROR_MESSAGES['latex_missing']} - {e}"
        print(f"‚ùå {error_msg}")
        raise LaTeXCompilationError(error_msg)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {e}"
        print(f"‚ùå {error_msg}")
        raise LaTeXCompilationError(error_msg)


def compile_latex_to_png(
    latex_content: str, 
    output_name: str = "output",
    dpi: int = None
) -> Optional[str]:
    """
    –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç LaTeX –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ PNG.
    
    Args:
        latex_content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ LaTeX –¥–æ–∫—É–º–µ–Ω—Ç–∞
        output_name (str): –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        dpi (int): –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Returns:
        Optional[str]: –ü—É—Ç—å –∫ PNG —Ñ–∞–π–ª—É –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, None –∏–Ω–∞—á–µ
        
    Raises:
        LaTeXCompilationError: If compilation or conversion fails
    """
    if not PDF_CONVERSION_AVAILABLE:
        error_msg = config.ERROR_MESSAGES["pdf2image_missing"]
        print(f"‚ùå {error_msg}")
        raise LaTeXCompilationError(error_msg)
    
    if dpi is None:
        dpi = config.DEFAULT_DPI
    
    # –°–Ω–∞—á–∞–ª–∞ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤ PDF
    try:
        if compile_latex(latex_content, output_name):
            temp_dir = config.get_temp_dir()
            pdf_file = temp_dir / f"{output_name}.pdf"
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Ñ–∞–π–ª –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–∏—Å–∞–Ω
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ PDF —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–∞–ª–∏–¥–µ–Ω
            if not pdf_file.exists():
                raise LaTeXCompilationError("PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ PNG
            png_path = convert_pdf_single_image(
                str(pdf_file),
                str(pdf_file.with_suffix('.png')),
                dpi=dpi
            )
            return png_path
            
    except PDFConversionError as e:
        error_msg = f"{config.ERROR_MESSAGES['conversion_failed']}: {e}"
        print(f"‚ùå {error_msg}")
        raise LaTeXCompilationError(error_msg)
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
        print(f"‚ùå {error_msg}")
        raise LaTeXCompilationError(error_msg)
    
    return None


def create_full_latex_document(content: str, task_type: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π LaTeX –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª–∞—Å—Å–∞ stand.cls.
    
    Args:
        content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞—á–∏
        task_type (str): –¢–∏–ø –∑–∞–¥–∞—á–∏ (COMPARISON –∏–ª–∏ ABCDE)
    
    Returns:
        str: –ü–æ–ª–Ω—ã–π LaTeX –¥–æ–∫—É–º–µ–Ω—Ç
    """
    document_options = config.LATEX_OPTIONS_MAP.get(task_type, "")
    
    document = f"""\\documentclass{{{config.LATEX_DOCUMENT_CLASS}}}
{document_options}

\\begin{{document}}

{content}

\\end{{document}}"""
    
    return document


def validate_latex_installation() -> bool:
    """
    Check if LaTeX is properly installed and available.
    
    Returns:
        bool: True if LaTeX is available, False otherwise
    """
    try:
        result = subprocess.run(
            [config.LATEX_COMPILER, "--version"], 
            capture_output=True, 
            text=True
        )
        return result.returncode == 0
    except FileNotFoundError:
        return False


def get_compilation_log(output_name: str) -> Optional[str]:
    """
    Get LaTeX compilation log for debugging.
    
    Args:
        output_name (str): Name of the output file
        
    Returns:
        Optional[str]: Log content if available, None otherwise
    """
    temp_dir = config.get_temp_dir()
    log_file = temp_dir / f"{output_name}.log"
    
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        return None