"""
LaTeX compilation utilities for mathematical task generation.

This module handles LaTeX document creation and compilation to PDF format,
with optional PNG conversion through the pdf_converter module.
"""

import subprocess
from pathlib import Path
from typing import Optional, List, Dict, Any
import asyncio
import aiofiles
import config
import time
import json

# Import PDF conversion functionality
try:
    from pdf_converter import convert_pdf_single_image, PDFConversionError
    PDF_CONVERSION_AVAILABLE = True
except ImportError:
    PDF_CONVERSION_AVAILABLE = False

def _load_counter() -> dict:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON —Å —Å—á–µ—Ç—á–∏–∫–æ–º –¥–ª—è —Ç–µ–º (threads/counter.json)."""
    file_path = Path(config.COUNTER_FILE)
    if file_path.exists():
        with open(file_path, "r", encoding="utf-8", errors="replace") as f:
            return json.load(f)
    return {}

def _save_counter(data: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON —Å —Å—á–µ—Ç—á–∏–∫–æ–º –¥–ª—è —Ç–µ–º (threads/counter.json)."""
    file_path = Path(config.COUNTER_FILE)
    file_path.parent.mkdir(parents=True, exist_ok=True)
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

class LaTeXCompilationError(Exception):
    """Custom exception for LaTeX compilation errors."""
    pass


async def compile_latex(latex_content: str, output_name: str = "output") -> bool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç LaTeX –¥–æ–∫—É–º–µ–Ω—Ç –≤ PDF.
    
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π .tex —Ñ–∞–π–ª, –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –µ–≥–æ –≤ PDF –∏—Å–ø–æ–ª—å–∑—É—è
    LaTeX –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä, –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–ø–∏–ª—è—Ü–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫.
    
    Args:
        latex_content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ LaTeX –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        output_name (str): –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "output")
    
    Returns:
        bool: True –µ—Å–ª–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        
    Raises:
        LaTeXCompilationError: –ï—Å–ª–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ –ª—é–±–æ–π –ø—Ä–∏—á–∏–Ω–µ
        
    Example:
        >>> content = "\\documentclass{article}\\begin{document}Hello\\end{document}"
        >>> success = await compile_latex(content, "test_document")
        >>> print(success)  # True if compilation successful
    """
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    temp_dir = config.get_temp_dir()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
    tex_file = temp_dir / f"{output_name}.tex"
    pdf_file = temp_dir / f"{output_name}.pdf"
    log_file = temp_dir / f"{output_name}.log"
    aux_file = temp_dir / f"{output_name}.aux"
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        for old_file in [pdf_file, log_file, aux_file]:
            if old_file.exists():
                old_file.unlink()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º LaTeX —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        async with aiofiles.open(tex_file, 'w', encoding='utf-8', errors='replace') as f:
            await f.write(latex_content)
        
        print(f"üîÑ –ö–æ–º–ø–∏–ª–∏—Ä—É—é LaTeX –¥–æ–∫—É–º–µ–Ω—Ç: {tex_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
        if not tex_file.exists():
            raise LaTeXCompilationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª {tex_file}")
        
        print(f"üìù LaTeX —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {tex_file} ({tex_file.stat().st_size} –±–∞–π—Ç)")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è subprocess –≤ executor
        loop = asyncio.get_event_loop()
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º PDF –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–≤
        success = False
        for attempt in range(config.LATEX_COMPILE_PASSES):
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{config.LATEX_COMPILE_PASSES}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
            cmd = [
                config.LATEX_COMPILER,
                *config.LATEX_OPTIONS,
                "-output-directory", str(temp_dir.resolve()),
                str(tex_file.resolve())  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ .tex —Ñ–∞–π–ª—É
            ]
            
            print(f"   –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ executor –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            result = await loop.run_in_executor(
                None,
                lambda: subprocess.run(
                    cmd, 
                    capture_output=True, 
                    text=True,
                    encoding='utf-8',
                    errors='replace',
                    timeout=60,  # 60 second timeout –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
                    cwd=str(temp_dir.resolve())  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - temp_latex
                )
            )
            
            if result.returncode == 0:
                success = True
                print(f"   ‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                # –î–∞–µ–º –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
                await asyncio.sleep(0.5)
                break
            else:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                print(f"   Return code: {result.returncode}")
                print(f"   STDOUT: {result.stdout[:500]}...")  # First 500 chars
                print(f"   STDERR: {result.stderr[:500]}...")  # First 500 chars
                
                if attempt == config.LATEX_COMPILE_PASSES - 1:  # Last attempt
                    error_msg = f"‚ùå {config.ERROR_MESSAGES['compilation_failed']}:\n"
                    error_msg += f"STDOUT: {result.stdout}\n"
                    error_msg += f"STDERR: {result.stderr}"
                    print(error_msg)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    if log_file.exists():
                        try:
                            async with aiofiles.open(log_file, 'r', encoding='utf-8', errors='replace') as f:
                                log_content = await f.read()
                                print(f"LaTeX Log (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):\n{log_content[-1000:]}")
                        except Exception as log_error:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥: {log_error}")
                    
                    raise LaTeXCompilationError(error_msg)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        if success and pdf_file.exists():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä PDF —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
            file_size = pdf_file.stat().st_size
            print(f"üìÑ PDF —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {pdf_file} ({file_size} –±–∞–π—Ç)")
            
            if file_size < 1024:  # –§–∞–π–ª—ã –º–µ–Ω—å—à–µ 1KB –≤–µ—Ä–æ—è—Ç–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã
                raise LaTeXCompilationError("PDF —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª - –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
            
            print(config.SUCCESS_MESSAGES["pdf_created"].format(path=pdf_file))
            return True
        else:
            raise LaTeXCompilationError("PDF —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
            
    except asyncio.TimeoutError:
        error_msg = "–¢–∞–π–º-–∞—É—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ LaTeX"
        print(f"‚ùå {error_msg}")
        raise LaTeXCompilationError(error_msg)
    except FileNotFoundError as e:
        error_msg = f"{config.ERROR_MESSAGES['latex_missing']} - {e}"
        print(f"‚ùå {error_msg}")
        raise LaTeXCompilationError(error_msg)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {e}"
        print(f"‚ùå {error_msg}")
        raise LaTeXCompilationError(error_msg)


async def compile_latex_to_png(
    latex_content: str, 
    output_name: str = "output",
    dpi: int = None
) -> Optional[str]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç LaTeX –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ PNG.
    
    –§—É–Ω–∫—Ü–∏—è —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç LaTeX –≤ PDF, –∑–∞—Ç–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    –≤ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.
    
    Args:
        latex_content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ LaTeX –¥–æ–∫—É–º–µ–Ω—Ç–∞
        output_name (str): –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        dpi (int): –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config.DEFAULT_DPI)
    
    Returns:
        Optional[str]: –ü—É—Ç—å –∫ PNG —Ñ–∞–π–ª—É –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, None –∏–Ω–∞—á–µ
        
    Raises:
        LaTeXCompilationError: –ï—Å–ª–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—è –∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        
    Example:
        >>> content = "\\documentclass{article}\\begin{document}$x^2$\\end{document}"
        >>> png_path = await compile_latex_to_png(content, "math_task", dpi=300)
        >>> print(f"PNG created: {png_path}")
    """
    if not PDF_CONVERSION_AVAILABLE:
        error_msg = config.ERROR_MESSAGES["pdf2image_missing"]
        print(f"‚ùå {error_msg}")
        raise LaTeXCompilationError(error_msg)
    
    if dpi is None:
        dpi = config.DEFAULT_DPI
    
    # –°–Ω–∞—á–∞–ª–∞ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤ PDF
    try:
        if await compile_latex(latex_content, output_name):
            temp_dir = config.get_temp_dir()
            pdf_file = temp_dir / f"{output_name}.pdf"
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Ñ–∞–π–ª –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –¥–∏—Å–∫
            await asyncio.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ PDF —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if not pdf_file.exists():
                raise LaTeXCompilationError("PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ PNG –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            png_path = await convert_pdf_single_image(
                str(pdf_file),
                str(pdf_file.with_suffix('.png')),
                dpi=dpi
            )
            return png_path
            
    except PDFConversionError as e:
        error_msg = f"{config.ERROR_MESSAGES['conversion_failed']}: {e}"
        print(f"‚ùå {error_msg}")
        raise LaTeXCompilationError(error_msg)
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
        print(f"‚ùå {error_msg}")
        raise LaTeXCompilationError(error_msg)
    
    return None


def create_full_latex_document(subject: str, content: str, task_type: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π LaTeX –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª–∞—Å—Å–∞ stand.cls.
    
    –§—É–Ω–∫—Ü–∏—è –æ–±–µ—Ä—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞—á–∏ –≤ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π LaTeX –¥–æ–∫—É–º–µ–Ω—Ç
    —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ –∫–ª–∞—Å—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏.
    
    Args:
        content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞—á–∏ (LaTeX –∫–æ–º–∞–Ω–¥—ã)
        task_type (str): –¢–∏–ø –∑–∞–¥–∞—á–∏ (COMPARISON –∏–ª–∏ ABCDE)
    
    Returns:
        str: –ü–æ–ª–Ω—ã–π LaTeX –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤—ã–π –∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        
    Example:
        >>> content = "\\ABCDE[What is 2+2?]{2}{3}{4}{5}{6}"
        >>> doc = create_full_latex_document(content, "ABCDE")
        >>> print(doc.startswith("\\documentclass"))  # True
    """
    document_options = config.LATEX_OPTIONS_MAP.get(task_type, "")
    counter = _load_counter()

    document = f"""\\documentclass{{{config.LATEX_DOCUMENT_CLASS}}}
{document_options}

\\begin{{document}}
\\setcounter{{comparisoncounter}}{{{counter[subject] if subject in counter else 0}}}
{content}

\\end{{document}}"""
    counter[subject] = counter.get(subject, 0) + 1
    _save_counter(counter)
    return document


async def validate_latex_installation() -> bool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ LaTeX —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.
    
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç LaTeX –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä —Å —Ñ–ª–∞–≥–æ–º --version –¥–ª—è
    –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.
    
    Returns:
        bool: True –µ—Å–ª–∏ LaTeX –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
        
    Example:
        >>> is_available = await validate_latex_installation()
        >>> if is_available:
        ...     print("LaTeX ready to use")
        ... else:
        ...     print("LaTeX not found")
    """
    try:
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(
            None,
            lambda: subprocess.run(
                [config.LATEX_COMPILER, "--version"], 
                capture_output=True, 
                text=True,
                encoding='utf-8',
                errors='replace',
                timeout=10  # Quick timeout for version check
            )
        )
        return result.returncode == 0
    except (FileNotFoundError, subprocess.TimeoutExpired):
        return False


async def get_compilation_log(output_name: str) -> Optional[str]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ª–æ–≥ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ LaTeX –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
    
    –§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç .log —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω–Ω—ã–π LaTeX –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º –¥–ª—è
    –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏.
    
    Args:
        output_name (str): –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
        
    Returns:
        Optional[str]: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, None –∏–Ω–∞—á–µ
        
    Example:
        >>> log_content = await get_compilation_log("my_document")
        >>> if log_content:
        ...     print("Compilation errors found in log")
    """
    temp_dir = config.get_temp_dir()
    log_file = temp_dir / f"{output_name}.log"
    
    try:
        async with aiofiles.open(log_file, 'r', encoding='utf-8', errors='replace') as f:
            return await f.read()
    except FileNotFoundError:
        return None


async def cleanup_temp_files(output_name: str, keep_pdf: bool = True) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏.
    
    –£–¥–∞–ª—è–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (.aux, .log, .toc –∏ —Ç.–¥.)
    —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ LaTeX, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã.
    
    Args:
        output_name (str): –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
        keep_pdf (bool): –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏ PDF —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        
    Example:
        >>> await cleanup_temp_files("my_document", keep_pdf=False)
        >>> # Removes all temporary files including PDF
    """
    temp_dir = config.get_temp_dir()
    
    # –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ LaTeX
    temp_extensions = ['.aux', '.log', '.toc', '.out', '.fls', '.fdb_latexmk', '.synctex.gz']
    
    if not keep_pdf:
        temp_extensions.append('.pdf')
    
    # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    for ext in temp_extensions:
        temp_file = temp_dir / f"{output_name}{ext}"
        if temp_file.exists():
            try:
                temp_file.unlink()
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
            except OSError as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {temp_file}: {e}")