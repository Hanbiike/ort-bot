import os
import logging
from aiogram import Router, F, types, Bot
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import BOT_TOKEN, TIKTOK_SESSION_ID, HAN_ID
from TikTokUploader.uploader import uploadVideo

router = Router()
bot = Bot(token=BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –≤ TikTok
class TikTokUploadStates(StatesGroup):
    waiting_for_video = State()
    waiting_for_description = State()
    waiting_for_hashtags = State()
    waiting_for_confirmation = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ
video_data = {}

def create_confirmation_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="confirm_upload"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_upload")
    )
    return builder.as_markup()

@router.message(Command("tiktok"))
async def cmd_tiktok(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –≤ TikTok (—Ç–æ–ª—å–∫–æ –¥–ª—è HAN –≤ –õ–°)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.chat.type != "private":
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ HAN
    if message.from_user.id != HAN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not TIKTOK_SESSION_ID:
        await message.answer("‚ùå TikTok Session ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")
        return
    
    await message.answer(
        "üé¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –≤ –Ω–µ—Å–∂–∞—Ç–æ–º –≤–∏–¥–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ TikTok.\n\n"
        "‚ö†Ô∏è –í–∞–∂–Ω–æ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∫–∞–∫ —Ñ–∞–π–ª (–Ω–µ –∫–∞–∫ —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ)."
    )
    await state.set_state(TikTokUploadStates.waiting_for_video)

@router.message(TikTokUploadStates.waiting_for_video, F.document)
async def handle_video_document(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç HAN
    if message.chat.type != "private" or message.from_user.id != HAN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await state.clear()
        return
    
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
    if not document.mime_type or not document.mime_type.startswith('video/'):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, WMV –∏ –¥—Ä—É–≥–∏–µ."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 100 –ú–ë)
    max_size = 100 * 1024 * 1024  # 100 –ú–ë
    if document.file_size > max_size:
        await message.answer(
            f"‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({document.file_size // (1024*1024)} –ú–ë).\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size // (1024*1024)} –ú–ë"
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(document.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        temp_dir = "temp_videos"
        os.makedirs(temp_dir, exist_ok=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_extension = document.file_name.split('.')[-1] if '.' in document.file_name else 'mp4'
        file_path = os.path.join(temp_dir, f"video_{message.from_user.id}.{file_extension}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file.file_path, file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ
        video_data[message.from_user.id] = {
            'file_path': file_path,
            'file_name': document.file_name,
            'file_size': document.file_size
        }
        
        await message.answer(
            f"‚úÖ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
            f"üìÅ –§–∞–π–ª: {document.file_name}\n"
            f"üìä –†–∞–∑–º–µ—Ä: {document.file_size // (1024*1024)} –ú–ë\n\n"
            f"üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ:"
        )
        
        await state.set_state(TikTokUploadStates.waiting_for_description)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )
        await state.clear()

@router.message(TikTokUploadStates.waiting_for_video)
async def handle_wrong_video_format(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–∏–¥–µ–æ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç HAN
    if message.chat.type != "private" or message.from_user.id != HAN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await state.clear()
        return
    
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∫–∞–∫ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç), –∞ –Ω–µ –∫–∞–∫ —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ.\n\n"
        "üí° –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ \"–§–∞–π–ª\" –∏–ª–∏ \"Document\"\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –≤–∏–¥–µ–æ"
    )

@router.message(TikTokUploadStates.waiting_for_description, F.text)
async def handle_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç HAN
    if message.chat.type != "private" or message.from_user.id != HAN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await state.clear()
        return
    
    if message.from_user.id not in video_data:
        await message.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /tiktok")
        await state.clear()
        return
    
    description = message.text.strip()
    
    if len(description) > 2200:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. TikTok –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 2200 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            f"–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    video_data[message.from_user.id]['description'] = description
    
    await message.answer(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description[:100]}{'...' if len(description) > 100 else ''}\n\n"
        f"üè∑Ô∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: #tiktok #video #fun):"
    )
    
    await state.set_state(TikTokUploadStates.waiting_for_hashtags)

@router.message(TikTokUploadStates.waiting_for_description)
async def handle_wrong_description_format(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç HAN
    if message.chat.type != "private" or message.from_user.id != HAN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await state.clear()
        return
    
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ.")

@router.message(TikTokUploadStates.waiting_for_hashtags, F.text)
async def handle_hashtags(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç HAN
    if message.chat.type != "private" or message.from_user.id != HAN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await state.clear()
        return
    
    if message.from_user.id not in video_data:
        await message.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /tiktok")
        await state.clear()
        return
    
    hashtags_text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º —Ö–µ—à—Ç–µ–≥–∏
    hashtags = []
    for word in hashtags_text.split():
        word = word.strip()
        if word:
            # –î–æ–±–∞–≤–ª—è–µ–º # –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not word.startswith('#'):
                word = '#' + word
            hashtags.append(word)
    
    if not hashtags:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ö–µ—à—Ç–µ–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
    video_data[message.from_user.id]['hashtags'] = hashtags
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    data = video_data[message.from_user.id]
    hashtags_str = ' '.join(hashtags)
    
    preview_text = (
        f"üé¨ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –¥–ª—è TikTok**\n\n"
        f"üìÅ **–§–∞–π–ª:** {data['file_name']}\n"
        f"üìä **–†–∞–∑–º–µ—Ä:** {data['file_size'] // (1024*1024)} –ú–ë\n\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{data['description']}\n\n"
        f"üè∑Ô∏è **–•–µ—à—Ç–µ–≥–∏:**\n{hashtags_str}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –≤ TikTok:"
    )
    
    await message.answer(
        preview_text,
        reply_markup=create_confirmation_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(TikTokUploadStates.waiting_for_confirmation)

@router.message(TikTokUploadStates.waiting_for_hashtags)
async def handle_wrong_hashtags_format(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç HAN
    if message.chat.type != "private" or message.from_user.id != HAN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await state.clear()
        return
    
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ.\n\n"
        "–ü—Ä–∏–º–µ—Ä: #tiktok #video #fun\n"
        "–∏–ª–∏: tiktok video fun"
    )

@router.callback_query(F.data == "confirm_upload", TikTokUploadStates.waiting_for_confirmation)
async def handle_confirm_upload(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç HAN
    if callback.message.chat.type != "private" or callback.from_user.id != HAN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await state.clear()
        return
    
    if callback.from_user.id not in video_data:
        await callback.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /tiktok")
        await state.clear()
        return
    
    await callback.answer()
    await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ TikTok...")
    
    try:
        data = video_data[callback.from_user.id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è TikTok (–æ–ø–∏—Å–∞–Ω–∏–µ + —Ö–µ—à—Ç–µ–≥–∏)
        title_with_hashtags = data['description'] + ' ' + ' '.join(data['hashtags'])
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –≤ TikTok: {data['file_name']}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ TikTok
        result = uploadVideo(
            session_id=TIKTOK_SESSION_ID,
            video=data['file_path'],
            title=title_with_hashtags,
            tags=data['hashtags'],
            users=[],
            url_prefix="us",
            schedule_time=0
        )
        
        if result:
            await callback.message.edit_text(
                f"‚úÖ **–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ TikTok!**\n\n"
                f"üìÅ –§–∞–π–ª: {data['file_name']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'][:50]}...\n"
                f"üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: {' '.join(data['hashtags'])[:50]}...",
                parse_mode="Markdown"
            )
            logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ TikTok: {data['file_name']}")
        else:
            await callback.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ –≤ TikTok**\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π Session ID\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n"
                "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è TikTok\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                parse_mode="Markdown"
            )
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ –≤ TikTok: {data['file_name']}")
        
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ –≤ TikTok: {e}")
        await callback.message.edit_text(
            f"‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ**\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            parse_mode="Markdown"
        )
    
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∞–π–ª
        if callback.from_user.id in video_data:
            data = video_data[callback.from_user.id]
            if os.path.exists(data['file_path']):
                try:
                    os.remove(data['file_path'])
                    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {data['file_path']}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            
            del video_data[callback.from_user.id]
        
        await state.clear()

@router.callback_query(F.data == "cancel_upload", TikTokUploadStates.waiting_for_confirmation)
async def handle_cancel_upload(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç HAN
    if callback.message.chat.type != "private" or callback.from_user.id != HAN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await state.clear()
        return
    
    await callback.answer()
    await callback.message.edit_text("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –≤ TikTok –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∞–π–ª
    if callback.from_user.id in video_data:
        data = video_data[callback.from_user.id]
        if os.path.exists(data['file_path']):
            try:
                os.remove(data['file_path'])
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {data['file_path']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        
        del video_data[callback.from_user.id]
    
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ TikTok —Ñ—É–Ω–∫—Ü–∏–∏
@router.message(Command("tiktok_status"))
async def cmd_tiktok_status(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ TikTok —Ñ—É–Ω–∫—Ü–∏–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç HAN
    if message.chat.type != "private" or message.from_user.id != HAN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    status_text = "üîç **–°—Ç–∞—Ç—É—Å TikTok —Ñ—É–Ω–∫—Ü–∏–∏:**\n\n"
    
    if TIKTOK_SESSION_ID:
        status_text += "‚úÖ TikTok Session ID: –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
    else:
        status_text += "‚ùå TikTok Session ID: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    temp_dir = "temp_videos"
    if os.path.exists(temp_dir):
        temp_files = [f for f in os.listdir(temp_dir) if f.startswith('video_')]
        status_text += f"üìÅ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(temp_files)}\n"
    else:
        status_text += "üìÅ –ü–∞–ø–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: –Ω–µ —Å–æ–∑–¥–∞–Ω–∞\n"
    
    status_text += f"\nüíæ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∑–∞–≥—Ä—É–∑–∫–∏: {len(video_data)}\n"
    
    status_text += "\nüìö **–ö–æ–º–∞–Ω–¥—ã:**\n"
    status_text += "‚Ä¢ `/tiktok` - –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ\n"
    status_text += "‚Ä¢ `/tiktok_status` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
    
    await message.answer(status_text, parse_mode="Markdown")