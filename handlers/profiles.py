from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, WebAppInfo
from methods.profiles import ProfileManager
from methods.scan import DocScanner
from methods.users import user_lang
from methods.validators import validate_score
from keyboards import menu
from config import OWNER_ID, MAX_SCORE, SCANNER_WEBAPP_URL
import json
import base64
from io import BytesIO

router = Router()
profile_manager = ProfileManager()

class ProfileStates(StatesGroup):
    waiting_for_sheet = State()
    waiting_for_name = State()
    waiting_for_score = State()

MESSAGES = {
    "profile_not_found": {
        "ru": "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å?",
        "kg": "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫.\n–ñ–∞“£—ã –ø—Ä–æ—Ñ–∏–ª—å —Ç“Ø–∑–≥“Ø“£“Ø–∑ –∫–µ–ª–µ–±–∏?"
    },
    "profile_template": {
        "ru": "üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nüë§ –§–ò–û: {name}\nüìä –ë–∞–ª–ª –û–†–¢: {score}\nüèÜ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {rank}/{total}",
        "kg": "üìã –°–∏–∑–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª–∏“£–∏–∑:\n\nüë§ –§–ê–ê: {name}\nüìä –ñ–†–¢ –±–∞–ª–ª—ã: {score}\nüèÜ –†–µ–π—Ç–∏–Ω–≥–¥–µ–≥–∏ –æ—Ä—É–Ω: {rank}/{total}"
    },
    "update_profile": {
        "ru": "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        "kg": "–ü—Ä–æ—Ñ–∏–ª–¥–∏ –∂–∞“£—ã—Ä—Ç—É—É"
    },
    "rating": {
        "ru": "–†–µ–π—Ç–∏–Ω–≥",
        "kg": "–†–µ–π—Ç–∏–Ω–≥"
    },
    "yes": {
        "ru": "‚úÖ –î–∞",
        "kg": "‚úÖ –û–æ–±–∞"
    },
    "no": {
        "ru": "‚ùå –ù–µ—Ç",
        "kg": "‚ùå –ñ–æ–∫"
    },
    "menu": {
        "ru": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "kg": "–ë–∞—à–∫—ã –º–µ–Ω—é"
    },
    "enter_full_name": {
        "ru": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        "kg": "–§–ê–ê“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:"
    },
    "enter_score": {
        "ru": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±–∞–ª–ª –û–†–¢ (–æ—Ç 0 –¥–æ 245):",
        "kg": "–ñ–†–¢ –±–∞–ª–ª—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ (0–¥–æ–Ω 245–≥–µ —á–µ–π–∏–Ω):"
    },
    "invalid_score": {
        "ru": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 245.",
        "kg": "‚ùå –¢—É—É—Ä–∞ —ç–º–µ—Å –±–∞–ª–ª. 0–¥–æ–Ω 245–≥–µ —á–µ–π–∏–Ω–∫–∏ —Å–∞–Ω–¥—ã –∂–∞–∑—ã“£—ã–∑."
    },
    "profile_submitted": {
        "ru": "‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        "kg": "‚úÖ –°–∏–∑–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª–∏“£–∏–∑ —Ç–µ–∫—à–µ—Ä“Ø“Ø–≥”© –∂”©–Ω”©—Ç“Ø–ª–¥“Ø."
    },
    "send_photo": {
        "ru": "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
        "kg": "üì∏ –°“Ø—Ä”©—Ç –∂”©–Ω”©—Ç“Ø“Ø"
    },
    "send_result_sheet": {
        "ru": "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Å—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ –æ–¥–Ω–æ–º—É. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        "kg": "üìÑ –ù–∞—Ç—ã–π–∂–∞–ª–∞—Ä –±–∞—Ä–∞–≥—ã–Ω—ã–Ω —Å“Ø—Ä”©—Ç“Ø–Ω –±–∏—Ä–¥–µ–Ω –∂”©–Ω”©—Ç“Ø“£“Ø–∑. –ë“Ø—Ç—Å”©“£“Ø–∑ '–ë“Ø—Ç—Ç“Ø' –¥–µ–ø –∂–∞–∑—ã“£—ã–∑."
    },
    "sheet_received": {
        "ru": "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        "kg": "‚úÖ –°“Ø—Ä”©—Ç –∞–ª—ã–Ω–¥—ã. –ö–∏–π–∏–Ω–∫–∏—Å–∏–Ω –∂”©–Ω”©—Ç“Ø“£“Ø–∑ –∂–µ '–ë“Ø—Ç—Ç“Ø' –¥–µ–ø –∂–∞–∑—ã“£—ã–∑."
    },
    "photo_received": {
        "ru": "‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        "kg": "‚úÖ –°“Ø—Ä”©—Ç —Ç–µ–∫—à–µ—Ä“Ø“Ø–≥”© –∂”©–Ω”©—Ç“Ø–ª–¥“Ø."
    },
    "profile_creation_rejected": {
        "ru": "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        "kg": "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Ç“Ø–∑“Ø“Ø –∂–æ–∫–∫–æ —á—ã–≥–∞—Ä—ã–ª–¥—ã."
    },
    "error_occurred": {
        "ru": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "kg": "‚ùå –ö–∞—Ç–∞ –∫–µ—Ç—Ç–∏. –ö–∏–π–∏–Ω—á–µ—Ä—ç—ç–∫ –∫–∞–π—Ç–∞–ª–∞“£—ã–∑."
    },
    "approve": {
        "ru": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        "kg": "‚úÖ –¢–∞—Å—Ç—ã–∫—Ç–æ–æ"
    },
    "reject": {
        "ru": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        "kg": "‚ùå –ß–µ—Ç–∫–µ –∫–∞–≥—É—É"
    },
    "new_profile_admin": {
        "ru": "üìù –ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç {user}:\nüë§ –§–ò–û: {name}\nüìä –ë–∞–ª–ª –û–†–¢: {score}",
        "kg": "üìù –ñ–∞“£—ã –ø—Ä–æ—Ñ–∏–ª—å {user}:\nüë§ –§–ê–ê: {name}\nüìä –ñ–†–¢ –±–∞–ª–ª—ã: {score}"
    },
    "rankings_header": {
        "ru": "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–ª–∞–º –û–†–¢:",
        "kg": "üèÜ –ñ–†–¢ –±–∞–ª–ª–¥–∞—Ä—ã –±–æ—é–Ω—á–∞ —Ä–µ–π—Ç–∏–Ω–≥:"
    },
    "ranking_line": {
        "ru": "{pos}. {name} - {score} –±–∞–ª–ª–æ–≤\n",
        "kg": "{pos}. {name} - {score} –±–∞–ª–ª\n"
    },
    "user_ranking_line": {
        "ru": "\n... –í–∞—à–µ –º–µ—Å—Ç–æ: {rank}. {name} - {score} –±–∞–ª–ª–æ–≤\n",
        "kg": "\n... –°–∏–∑–¥–∏–Ω –æ—Ä—É–Ω—É“£—É–∑: {rank}. {name} - {score} –±–∞–ª–ª\n"
    },
    "total_participants": {
        "ru": "\n\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total}",
        "kg": "\n\n–ë–∞—Ä–¥—ã–∫ –∫–∞—Ç—ã—à—É—É—á—É–ª–∞—Ä: {total}"
    }
}

def get_message(key: str, lang: str) -> str:
    return MESSAGES.get(key, {}).get(lang, "Message not found")

async def get_profile_keyboard(lang: str) -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[[
            types.KeyboardButton(text=get_message("update_profile", lang)),
            types.KeyboardButton(text=get_message("rating", lang)),
            types.KeyboardButton(text=get_message("menu", lang))
        ]],
        resize_keyboard=True
    )

async def get_confirmation_keyboard(lang: str) -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[[
            types.KeyboardButton(text=get_message("yes", lang)),
            types.KeyboardButton(text=get_message("no", lang)),
            types.KeyboardButton(text=get_message("menu", lang))
        ]],
        resize_keyboard=True
    )

async def get_scan_keyboard(lang: str) -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[[
            types.KeyboardButton(
                text=get_message("send_photo", lang),
                web_app=WebAppInfo(url=SCANNER_WEBAPP_URL)
            )
        ], [
            types.KeyboardButton(text=get_message("menu", lang))
        ]],
        resize_keyboard=True
    )

@router.message(F.text.lower().in_(["–ø—Ä–æ—Ñ–∏–ª—å", "profile"]))
@router.message(Command("profile"))
async def show_profile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await user_lang(user_id)
    profile = await profile_manager.get_profile(user_id)
    
    if not profile:
        await message.answer(
            get_message("profile_not_found", lang),
            reply_markup=await get_confirmation_keyboard(lang)
        )
        return

    rank, total = await profile_manager.get_user_rank(user_id)
    text = await profile_manager.format_profile(profile, rank, total, lang)
    
    await message.answer(
        text,
        reply_markup=await get_profile_keyboard(lang)
    )

@router.message(F.text.in_(["‚úÖ –î–∞", "‚úÖ –û–æ–±–∞"]))
async def confirm_profile_creation(message: types.Message, state: FSMContext):
    await update_profile_start(message, state)

@router.message(F.text.in_(["‚ùå –ù–µ—Ç", "‚ùå –ñ–æ–∫"]))
async def reject_profile_creation(message: types.Message):
    lang = await user_lang(message.from_user.id)
    text = get_message("profile_creation_rejected", lang)
    
    await message.answer(text)

@router.message(F.text.lower().in_(["–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–ø—Ä–æ—Ñ–∏–ª–¥–∏ –∂–∞“£—ã—Ä—Ç—É—É"]))
async def update_profile_start(message: types.Message, state: FSMContext):
    lang = await user_lang(message.from_user.id)
    await message.answer(
        get_message("send_result_sheet", lang)
    )
    await state.set_state(ProfileStates.waiting_for_sheet)

DONE_WORDS = ["–≥–æ—Ç–æ–≤–æ", "–±“Ø—Ç—Ç“Ø"]

@router.message(ProfileStates.waiting_for_sheet, F.photo)
@router.message(ProfileStates.waiting_for_sheet, F.document)
async def process_result_sheet(message: types.Message, state: FSMContext):
    lang = await user_lang(message.from_user.id)
    try:
        file_id = None
        if message.photo:
            file_id = message.photo[-1].file_id
        elif message.document:
            file_id = message.document.file_id
        if not file_id:
            return
        file = await message.bot.get_file(file_id)
        file_bytes = await message.bot.download_file(file.file_path)
        image_bytes = file_bytes.read()

        scanner = DocScanner()
        processed = scanner.scan_bytes(image_bytes)
        bio = BytesIO(processed)
        bio.name = "scan.jpg"
        caption = (
            f"üìÑ –°–∫–∞–Ω –æ—Ç <a href='tg://user?id={message.from_user.id}'>"
            f"{message.from_user.full_name}</a>"
        )
        await message.bot.send_photo(
            OWNER_ID, bio, caption=caption, parse_mode="HTML"
        )
        await message.answer(get_message("sheet_received", lang))
    except Exception as e:
        print(f"Error processing sheet: {e}")
        await message.answer(get_message("error_occurred", lang))


@router.message(ProfileStates.waiting_for_sheet, F.text.casefold().in_(DONE_WORDS))
async def finish_sheet_upload(message: types.Message, state: FSMContext):
    lang = await user_lang(message.from_user.id)
    await message.answer(get_message("enter_full_name", lang))
    await state.set_state(ProfileStates.waiting_for_name)

@router.message(ProfileStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    lang = await user_lang(message.from_user.id)
    
    await message.answer(
        get_message("enter_score", lang)
    )
    await state.set_state(ProfileStates.waiting_for_score)

@router.message(ProfileStates.waiting_for_score)
async def process_score(message: types.Message, state: FSMContext):
    lang = await user_lang(message.from_user.id)
    
    try:
        score = validate_score(message.text)
        user_data = await state.get_data()
        
        if not user_data.get('full_name'):
            await message.answer(get_message("error_occurred", lang))
            await state.clear()
            return
            
        await profile_manager.add_pending_profile(
            message.from_user.id,
            user_data['full_name'],
            score
        )
        
        await message.answer(
            get_message("profile_submitted", lang),
            reply_markup=await get_profile_keyboard(lang)
        )
        
        markup = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text=get_message("approve", lang),
                callback_data=f"approve_{message.from_user.id}"
            ),
            InlineKeyboardButton(
                text=get_message("reject", lang),
                callback_data=f"reject_{message.from_user.id}"
            )
        ]])
        
        username = message.from_user.username or message.from_user.full_name
        await message.bot.send_message(
            OWNER_ID,
            get_message("new_profile_admin", lang).format(
                user=f"@{username}",
                name=user_data['full_name'],
                score=score
            ),
            parse_mode="HTML",
            reply_markup=markup
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer(get_message("invalid_score", lang))
    except Exception as e:
        print(f"Error in process_score: {e}")
        await message.answer(get_message("error_occurred", lang))
        await state.clear()

@router.callback_query(F.data.startswith("approve_"))
async def approve_profile_handler(callback: CallbackQuery):
    if callback.from_user.id != OWNER_ID:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    try:
        user_id = int(callback.data.split("_")[1])
        if await profile_manager.approve_profile(user_id):
            await callback.message.edit_text(
                f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
                reply_markup=None
            )
            await callback.bot.send_message(
                user_id,
                "‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
            )
        else:
            await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫—É")
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    finally:
        await callback.answer()

@router.callback_query(F.data.startswith("reject_"))
async def reject_profile_handler(callback: CallbackQuery):
    if callback.from_user.id != OWNER_ID:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    try:
        user_id = int(callback.data.split("_")[1])
        if await profile_manager.reject_profile(user_id):
            await callback.message.edit_text(
                f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω",
                reply_markup=None
            )
            await callback.bot.send_message(
                user_id,
                "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."
            )
        else:
            await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫—É")
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    finally:
        await callback.answer()

@router.message(F.text == "Pending Profiles")
async def list_pending_profiles(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return
        
    pending = await profile_manager.get_pending_profiles()
    if not pending:
        await message.answer("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫—É")
        return
        
    text = "üìù –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:\n\n"
    for profile in pending:
        text += (f"üë§ ID: {profile['user_id']}\n"
                f"üìã –§–ò–û: {profile['full_name']}\n"
                f"üìä –ë–∞–ª–ª –û–†–¢: {profile['–æ—Ä—Ç_score']}\n"
                f"‚è∞ –°–æ–∑–¥–∞–Ω: {profile['timestamp']}\n\n")
    
    await message.answer(text)

@router.message(F.text.lower() == "—Ä–µ–π—Ç–∏–Ω–≥")
async def show_rankings(message: types.Message):
    user_id = message.from_user.id
    lang = await user_lang(user_id)
    
    rankings_text = await profile_manager.format_rankings(
        user_id,
        lang,
        top_count=10
    )

    await message.answer(rankings_text)


@router.message(F.web_app_data)
async def handle_scan(message: types.Message):
    """Receive photo from WebApp and forward to admin."""
    lang = await user_lang(message.from_user.id)
    try:
        data = json.loads(message.web_app_data.data)
        image_data = data.get("image")
        if image_data:
            header, b64 = image_data.split(",", 1)
            image_bytes = base64.b64decode(b64)
            scanner = DocScanner()
            processed = scanner.scan_bytes(image_bytes)
            bio = BytesIO(processed)
            bio.name = "scan.jpg"
            caption = (
                f"üìÑ –°–∫–∞–Ω –æ—Ç <a href='tg://user?id={message.from_user.id}'>"
                f"{message.from_user.full_name}</a>"
            )
            await message.bot.send_photo(
                OWNER_ID, bio, caption=caption, parse_mode="HTML"
            )
            await message.answer(
                get_message("photo_received", lang),
                reply_markup=await get_profile_keyboard(lang)
            )
        else:
            await message.answer(get_message("error_occurred", lang))
    except Exception as e:
        print(f"Error processing webapp data: {e}")
        await message.answer(get_message("error_occurred", lang))
